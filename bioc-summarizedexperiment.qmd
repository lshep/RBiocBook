# Introduction to `SummarizedExperiment`

<!-- This is taken from the summarizedExperiment package vignette -->

The `SummarizedExperiment` class is used to store rectangular matrices of
experimental results, which are commonly produced by sequencing and microarray
experiments.  Each object stores observations of one or more samples, along
with additional meta-data describing both the observations (features) and
samples (phenotypes).

A key aspect of the `SummarizedExperiment` class is the coordination of the
meta-data and assays when subsetting. For example, if you want to exclude a
given sample you can do for both the meta-data and assay in one operation,
which ensures the meta-data and observed data will remain in sync.  Improperly
accounting for meta and observational data has resulted in a number of
incorrect results and retractions so this is a very desirable
property.

`SummarizedExperiment` is in many ways similar to the historical
`ExpressionSet`, the main distinction being that `SummarizedExperiment` is more
flexible in it's row information, allowing both `GRanges` based as well as those
described by arbitrary `DataFrame`s.  This makes it ideally suited to a variety
of experiments, particularly sequencing based experiments such as RNA-Seq and
ChIp-Seq.

```{r eval=FALSE}
BiocManager::install('airway')
BiocManager::install('SummarizedExperiment')
```

##  Anatomy of a `SummarizedExperiment`

The _SummarizedExperiment_ package contains two classes: 
`SummarizedExperiment` and `RangedSummarizedExperiment`.

`SummarizedExperiment` is a matrix-like container where rows represent features
of interest (e.g. genes, transcripts, exons, etc.) and columns represent
samples. The objects contain one or more assays, each represented by a
matrix-like object of numeric or other mode. The rows of a
`SummarizedExperiment` object represent features of interest.  Information
about these features is stored in a `DataFrame` object, accessible using the
function `rowData()`. Each row of the `DataFrame` provides information on the
feature in the corresponding row of the `SummarizedExperiment` object. Columns
of the DataFrame represent different attributes of the features of interest,
e.g., gene or transcript IDs, etc.

`RangedSummarizedExperiment` is the "child"" of the `SummarizedExperiment` class
which means that all the methods on `SummarizedExperiment` also work on a
`RangedSummarizedExperiment`.

The fundamental difference between the two classes is that the rows of a
`RangedSummarizedExperiment` object represent genomic ranges of interest
instead of a `DataFrame` of features. The `RangedSummarizedExperiment` ranges
are described by a `GRanges` or a `GRangesList` object, accessible using the
`rowRanges()` function.

@fig-se-diagram displays the class geometry and highlights the
vertical (column) and horizontal (row) relationships.


![Summarized Experiment. There are three main components, the `colData()`, the `rowData()` and the `assays()`. The accessors for the various parts of a complete SummarizedExperiment object match the names. ](images/se.png){#fig-se-diagram}

### Assays

The `airway` package contains an example dataset from an RNA-Seq experiment of
read counts per gene for airway smooth muscles.  These data are stored
in a `RangedSummarizedExperiment` object which contains 8 different
experimental and assays 64,102 gene transcripts.

```{r, echo=FALSE}
suppressPackageStartupMessages(library(SummarizedExperiment))
if(!require(airway)) {
    BiocManager::install('airway')
}
suppressPackageStartupMessages(data(airway, package="airway"))
```

```{r}
library(SummarizedExperiment)
data(airway, package="airway")
se <- airway
se
```

To retrieve the experiment data from a `SummarizedExperiment` object one can
use the `assays()` accessor.  An object can have multiple assay datasets
each of which can be accessed using the `$` operator.
The `airway` dataset contains only one assay (`counts`).  Here each row
represents a gene transcript and each column one of the samples.

```{r assays, eval = FALSE}
assays(se)$counts
```

```{r assays_table, echo = FALSE}
knitr::kable(assays(se)$counts[1:10,])
```

### 'Row' (regions-of-interest) data

The `rowRanges()` accessor is used to view the range information for a
`RangedSummarizedExperiment`. (Note if this were the parent 
`SummarizedExperiment` class we'd use `rowData()`). The data are stored in a 
`GRangesList` object, where each list element corresponds to one gene 
transcript and the ranges in each `GRanges` correspond to the exons in the
transcript.

```{r rowRanges}
rowRanges(se)
```

### 'Column' (sample) data

Sample meta-data describing the samples can be accessed using `colData()`, and
is a `DataFrame` that can store any number of descriptive columns for each
sample row.

```{r colData}
colData(se)
```

This sample metadata can be accessed using the `$` accessor which makes it 
easy to subset the entire object by a given phenotype.

```{r columnSubset}
# subset for only those samples treated with dexamethasone
se[, se$dex == "trt"]
```

### Experiment-wide metadata

Meta-data describing the experimental methods and publication references can be
accessed using `metadata()`.

```{r metadata}
metadata(se)
```

Note that `metadata()` is just a simple list, so it is appropriate for _any_
experiment wide metadata the user wishes to save, such as storing model
formulas.

```{r metadata-formula}
metadata(se)$formula <- counts ~ dex + albut

metadata(se)
```

## Common operations on `SummarizedExperiment`

### Subsetting

- `[` Performs two dimensional subsetting, just like subsetting a matrix
    or data frame.
```{r 2d}
# subset the first five transcripts and first three samples
se[1:5, 1:3]
```
- `$` operates on `colData()` columns, for easy sample extraction.
```{r colDataExtraction}
se[, se$cell == "N61311"]
```

### Getters and setters

- `rowRanges()` / (`rowData()`), `colData()`, `metadata()`
```{r getSet}
counts <- matrix(1:15, 5, 3, dimnames=list(LETTERS[1:5], LETTERS[1:3]))

dates <- SummarizedExperiment(assays=list(counts=counts),
                              rowData=DataFrame(month=month.name[1:5], day=1:5))

# Subset all January assays
dates[rowData(dates)$month == "January", ]
```

- `assay()` versus `assays()`
There are two accessor functions for extracting the assay data from a
`SummarizedExperiment` object.  `assays()` operates on the entire list of assay
data as a whole, while `assay()` operates on only one assay at a time.
`assay(x, i)` is simply a convenience function which is equivalent to
`assays(x)[[i]]`.

```{r assay_assays}
assays(se)

assays(se)[[1]][1:5, 1:5]

# assay defaults to the first assay if no i is given
assay(se)[1:5, 1:5]

assay(se, 1)[1:5, 1:5]
```

### Range-based operations

- `subsetByOverlaps()`
`SummarizedExperiment` objects support all of the `findOverlaps()` methods and
associated functions.  This includes `subsetByOverlaps()`, which makes it easy
to subset a `SummarizedExperiment` object by an interval.

In tne next code block, we define a region of interest (or many regions of interest)
and then subset our `SummarizedExperiment` by overlaps with this region.

```{r overlap}
# Subset for only rows which are in the interval 100,000 to 110,000 of
# chromosome 1
roi <- GRanges(seqnames="1", ranges=100000:1100000)
sub_se = subsetByOverlaps(se, roi)
sub_se
dim(sub_se)
```


## Constructing a `SummarizedExperiment` 

To construct a `SummarizedExperiment` object, you need to provide the following
components:
- `assays`: A list of matrices or matrix-like objects containing the data.
- `rowData`: A `DataFrame` containing information about the features (rows).
- `colData`: A `DataFrame` containing information about the samples (columns).
- +/- `metadata`: A list containing additional metadata about the experiment.

For a nearly real example, we will use the DeRisi dataset. We'll start with the
original data, which is a `data.frame` with the first couple of columns containing
the gene information and the rest of the columns containing the data.

```{r}
# Load the DeRisi dataset
deRisi <- read.csv("https://raw.githubusercontent.com/seandavi/RBiocBook/refs/heads/main/data/derisi.csv")
head(deRisi)
```

To convert this to a `SummarizedExperiment`, we need to extract the assay data, row data, and column data. The assay data will be the numeric values in the data frame, the row data will be the gene information, and the column data will be the sample information.

### rowData, or feature information

Let's start with the rowData, which will be a `DataFrame` containing the gene information. We can use the first two columns of the data frame for this purpose.

```{r}
rdata <- deRisi[, 1:2]
head(rdata)
```

### colData, or sample information

Next, we will create the colData, which will be a `DataFrame` containing the sample information. Since the sample information really isn't in the dataset, we will create a simple `DataFrame` with sample names.

```{r}
cdata <- DataFrame(sample=paste("Sample", 0:6), timepoint = 0:6,
    hours = c(0, 9.5,11.5,13.5,15.5,18.5,20.5))
head(cdata)
```

### assays, or the data

Remember that the DeRisi dataset has four _different_ assays, 

| assay | description |
|-------|-------------|
| R | Red fluorescence |
| G | Green luorescence |
| Rb | Red background fluorescence |
| Gb | Green background fluorescence |

We will create a list of matrices, one for each assay. The matrices will be the numeric values in the data frame, excluding the first two columns.

```{r}
R <- as.matrix(deRisi[, 3:9])
G <- as.matrix(deRisi[, 10:16])
Rb <- as.matrix(deRisi[, 17:23])
Gb <- as.matrix(deRisi[, 24:30])
```

When we create a SummarizedExperiment object, the "constructor" will check to see
that the colnames of the matrices in the list are the same as the _rownames_ of the 
`colData` `DataFrame`, and that the rownames of the matrices in the list are the same as the _rownames_ of the `rowData` `DataFrame`.

So, we need to fix that all up. Let's start wit the rownames of the `rowData` `DataFrame`:

```{r}
rownames(rdata) <- rdata$ORF
```

Now, let's set the rownames of the coldata `DataFrame` to the sample names:

```{r}
rownames(cdata) <- cdata$sample
```

Now, we can fix the rownames and colnames of the matrices for our R, G, Rb, and Gb assays:

```{r}
rownames(R) <- rdata$ORF
rownames(G) <- rdata$ORF
rownames(Rb) <- rdata$ORF
rownames(Gb) <- rdata$ORF
colnames(R) <- cdata$sample
colnames(G) <- cdata$sample
colnames(Rb) <- cdata$sample
colnames(Gb) <- cdata$sample
```

Take a look at the matrices to make sure they look right.

### Putting it all together


```{r}
se <- SummarizedExperiment(assays=list(R=R, G=G, Rb=Rb, Gb=Gb), rowData=rdata, colData=cdata)
```

### Getting logRatios

Now that we have a `SummarizedExperiment` object, we can easily compute the log ratios of the Red and Green foreground fluorescence. This is a common operation in microarray data analysis. 

```{r}
logRatios <- log2(
    (assay(se, "R") - assay(se, "Rb")) / (assay(se, "G") - assay(se, "Gb"))
)
assays(se)$logRatios <- logRatios
```

Now, we've added a new assay to the `SummarizedExperiment` object called `logRatios`. This assay contains the log ratios of the Red and Green foreground fluorescence. 

```{r}
assays(se)
```

And if we want to access the log ratios, we can do so using the `assay()` method:

```{r}
head(assay(se, "logRatios"))
## OR
head(assays(se)$logRatios)
```


```{r}
hist(assays(se)$logRatios, breaks=50, main="Log Ratios of Red and Green Foreground Fluorescence", xlab="Log Ratio")
```
