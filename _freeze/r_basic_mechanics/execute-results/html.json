{
  "hash": "7da32ba1d8878fad1bb1b35ff5cdb997",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Sean Davis & Garrett Grolemund\"\n---\n\n# Up and Running with R\n\nIn this chapter, we're going to get an introduction to the R language, so we can dive right into programming. We're going to create a pair of virtual dice that can generate random numbers. No need to worry if you're new to programming. We'll return to many of the concepts here in more detail later.  \n\nTo simulate a pair of dice, we need to break down each die into its essential features. A die can only show one of six numbers: 1, 2, 3, 4, 5, and 6. We can capture the die's essential characteristics by saving these numbers as a group of values in the computer. Let's save these numbers first and then figure out a way to \"roll\" our virtual die.\n\n## The R User Interface\n\nThe RStudio interface is simple. You type R code into the bottom line of the RStudio console pane and then click Enter to run it. The code you type is called a _command_, because it will command your computer to do something for you. The line you type it into is called the _command line_.\n\n![Your computer does your bidding when you type R commands at the prompt in the bottom line of the console pane. Don't forget to hit the Enter key. When you first open RStudio, the console appears in the pane on your left, but you can change this with **File > Tools > Global Options** in the menu bar.](images/rstudio_image.png){#fig-rstudio-start}\n\nWhen you type a command at the prompt and hit Enter, your computer executes the command and shows you the results. Then RStudio displays a fresh prompt for your next command. For example, if you type `1 + 1` and hit Enter, RStudio will display:\n\n```\n> 1 + 1\n[1] 2\n>\n```\n\nYou'll notice that a `[1]` appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command `100:130` returns 31 values; it creates a sequence of integers from 100 to 130. Notice that new bracketed numbers appear at the start of the second and third lines of output. These numbers just mean that the second line begins with the 14th value in the result, and the third line begins with the 25th value. You can mostly ignore the numbers that appear in brackets:\n\n```\n> 100:130\n [1] 100 101 102 103 104 105 106 107 108 109 110 111 112\n[14] 113 114 115 116 117 118 119 120 121 122 123 124 125\n[25] 126 127 128 129 130\n```\n\n::: {.callout-tip}\nThe colon operator (`:`) returns every integer between two integers. It is an easy way to create a sequence of numbers.\n:::\n\n::: {.callout-note}\n## When do we compile?\n\nIn some languages, like C, Java, and FORTRAN, you have to compile your human-readable code into machine-readable code (often 1s and 0s) before you can run it. If you've programmed in such a language before, you may wonder whether you have to compile your R code before you can use it. The answer is no. R is a dynamic programming language, which means R automatically interprets your code as you run it. \n:::\n\nIf you type an incomplete command and press Enter, R will display a `+` prompt, which means R is waiting for you to type the rest of your command. Either finish the command or hit Escape to start over:\n\n```r\n> 5 -\n+\n+ 1\n[1] 4\n```\n\nIf you type a command that R doesn't recognize, R will return an error message. If you ever see an error message, don't panic. R is just telling you that your computer couldn't understand or do what you asked it to do. You can then try a different command at the next prompt:\n\n```r\n> 3 % 5\nError: unexpected input in \"3 % 5\"\n>\n```\n\n::: {.callout-tip}\nWhenever you get an error message in R, consider googling the error message. You'll often find that someone else has had the same problem and has posted a solution online. Simply cutting-and-pasting the error message into a search engine will often work\n:::\n\n\nOnce you get the hang of the command line, you can easily do anything in R that you would do with a calculator. For example, you could do some basic arithmetic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * 3   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\n4 - 1   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# this obeys order-of-operations\n6 / (4 - 1)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n::: {.callout-tip}\nR treats the hashtag character, `#`, in a special way; R will not run anything that follows a hashtag on a line. This makes hashtags very useful for adding comments and annotations to your code. Humans will be able to read the comments, but your computer will pass over them. The hashtag is known as the _commenting symbol_ in R.\n:::\n\n::: {.callout-important}\n## Cancelling commands\n\nSome R commands may take a long time to run. You can cancel a command once it has begun by pressing ctrl + c or by clicking the \"stop sign\" if it is available in Rstudio. Note that it may also take R a long time to cancel the command. \n:::\n\n\n### An exercise\n\nThat's the basic interface for executing R code in RStudio. Think you have it? If so, try doing these simple tasks. If you execute everything correctly, you should end up with the same number that you started with: \n\n1. Choose any number and add 2 to it.\n2. Multiply the result by 3.\n3. Subtract 6 from the answer.\n4. Divide what you get by 3.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\n12 * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 36\n```\n\n\n:::\n\n```{.r .cell-code}\n36 - 6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n\n```{.r .cell-code}\n30 / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n## Objects\n\nNow that you know how to use R, let's use it to make a virtual die. The `:` operator from a couple of pages ago gives you a nice way to create a group of numbers from one to six. The `:` operator returns its results as a __vector__ (we are going to work with vectors in more detail), a one-dimensional set of numbers:\n\n```r\n1:6\n## 1 2 3 4 5 6\n```\n\nThat's all there is to how a virtual die looks! But you are not done yet. Running `1:6` generated a vector of numbers for you to see, but it didn't save that vector anywhere for later use. If we want to use those numbers again, we'll have to ask your computer to save them somewhere. You can do that by creating an R _object_.\n\nR lets you save data by storing it inside an R object. What is an object? Just a name that you can use to call up stored data. For example, you can save data into an object like _`a`_ or _`b`_. Wherever R encounters the object, it will replace it with the data saved inside, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\n## What just happened?\n  \n1. To create an R object, choose a name and then use the less-than symbol, `<`, followed by a minus sign, `-`, to save data into it. This combination looks like an arrow, `<-`. R will make an object, give it your name, and store in it whatever follows the arrow. So `a <- 1` stores `1` in an object named `a`.\n2. When you ask R what's in `a`, R tells you on the next line.\n3. You can use your object in new R commands, too. Since `a` previously stored the value of `1`, you're now adding `1` to `2`.\n:::\n\n::: {.callout-important}\n## Assignment vs expressions\n\nEverything that you type into the R console can be assigned to one of two categories:\n\n- Assignments\n- Expressions\n\nAn expression is a command that tells R to do something. For example, `1 + 2` is an expression that tells R to add `1` and `2`. When you type an expression into the R console, R will evaluate the expression and return the result. For example, if you type `1 + 2` into the R console, R will return `3`. Expressions can have \"side effects\" but they don't explicitly result\nin anything being added to R memory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n28 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n5 + 4 * 4 + 4 ^ 4 / 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46.6\n```\n\n\n:::\n:::\n\n\nWhile using R as a calculator is interesting, to do useful and interesting things, we need to assign values to objects. To create objects, we need to give it a name followed by the assignment operator `<-` (or, entirely equivalently, `=`) and the value we want to give it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 55\n```\n:::\n\n:::\n\n\nSo, for another example, the following code would create an object named `die` that contains the numbers one through six. To see what is stored in an object, just type the object's name by itself:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\nWhen you create an object, the object will appear in the environment pane of RStudio, as shown in @fig-add-to-environment. This pane will show you all of the objects you've created since opening RStudio.\n\n![Assignment creates an object in the environment pane.](images/rstudio_add_to_environment.png){#fig-add-to-environment}\n\n\n\n::: {.cell}\n\n:::\n\n\nYou can name an object in R almost anything you want, but there are a few rules. First, a name cannot start with a number. Second, a name cannot use some special symbols, like `^`, `!`, `$`, `@`, `+`, `-`, `/`, or `*`:\n\n|Good names|Names that cause errors\n|----------|----------\n|a         | 1trial\n|b         | $\n|FOO       | ^mean\n|my_var    | 2nd\n|.day      | !bad\n\n\n::: {.callout-warning}\n## Capitalization matters\n  \nR is case-sensitive, so `name` and `Name` will refer to different objects:\n\n```r\n> Name = 0\n> Name + 1\n[1] 1\n> name + 1\nError: object 'name' not found\n```\nThe error above is a common one!\n\n:::\n\nFinally, R will overwrite any previous information stored in an object without asking you for permission. So, it is a good idea to _not_ use names that are already taken:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 1\nmy_number \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 999\nmy_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 999\n```\n\n\n:::\n:::\n\n\nYou can see which object names you have already used with the function `ls`:\n\n```r\nls()\n```\n\nYour environment will contain different names than mine, because you have probably created different objects.\n\nYou can also see which names you have used by examining RStudio's environment pane.\n\nWe now have a virtual die that is stored in the computer's memory and which has a name that we can use to refer to it. You can access it whenever you like by typing the word *`die`*. \n\nSo what can you do with this die? Quite a lot. R will replace an object with its contents whenever the object's name appears in a command. So, for example, you can do all sorts of math with the die. Math isn't so helpful for rolling dice, but manipulating sets of numbers will be your stock and trade as a data scientist. So let's take a look at how to do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\ndie / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 1.5 2.0 2.5 3.0\n```\n\n\n:::\n\n```{.r .cell-code}\ndie * die\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  4  9 16 25 36\n```\n\n\n:::\n:::\n\n\nR uses _element-wise execution_ when working with a _vector_ like `die`. When you manipulate a set of numbers, R will apply the same operation to each element in the set. So for example, when you run *`die - 1`*, R subtracts one from each element of `die`. \n\nWhen you use two or more vectors in an operation, R will line up the vectors and perform a sequence of individual operations. For example, when you run *`die * die`*, R lines up the two `die` vectors and then multiplies the first element of vector 1 by the first element of vector 2. R then multiplies the second element of vector 1 by the second element of vector 2, and so on, until every element has been multiplied. The result will be a new vector the same length as the first two {@fig-elementwise}.\n\n![\"When R performs element-wise execution, it matches up vectors and then manipulates each pair of elements independently.\"](images/hopr_0103.png){#fig-elementwise}\n\nIf you give R two vectors of unequal lengths, R will repeat the shorter vector until it is as long as the longer vector, and then do the math, as shown in @fig-recycle. This isn't a permanent change--the shorter vector will be its original size after R does the math. If the length of the short vector does not divide evenly into the length of the long vector, R will return a warning message. This behavior is known as _vector recycling_, and it helps R do element-wise operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n\n```{.r .cell-code}\n1:4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\ndie + 1:2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 4 6 6 8\n```\n\n\n:::\n\n```{.r .cell-code}\ndie + 1:4\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in die + 1:4: longer object length is not a multiple of shorter object\nlength\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6 8 6 8\n```\n\n\n:::\n:::\n\n\n![\"R will repeat a short vector to do element-wise operations with two vectors of uneven lengths.\"](images/hopr_0104.png){#fig-recycle}\n\nElement-wise operations are a very useful feature in R because they manipulate groups of values in an orderly way. When you start working with data sets, element-wise operations will ensure that values from one observation or case are only paired with values from the same observation or case. Element-wise operations also make it easier to write your own programs and functions in R. \n\n::: {.callout-important}\n## Element-wise operations are not matrix operations\n\nIt is important to know that operations with vectors are not the same that you might expect if you are expecting R to perform \"matrix\" operations. R can do inner multiplication with the `%*%` operator and outer multiplication with the `%o%` operator:\n\n```r\n# Inner product (1*1 + 2*2 + 3*3 + 4*4 + 5*5 + 6*6)\ndie %*% die\n# Outer product\ndie %o% die\n```\n:::\n\nNow that you can do math with your `die` object, let's look at how you could \"roll\" it. Rolling your die will require something more sophisticated than basic arithmetic; you'll need to randomly select one of the die's values. And for that, you will need a _function_.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}