{
  "hash": "8aab1d274794fc2735b7878d25d0ae23",
  "result": {
    "engine": "knitr",
    "markdown": "# Genomic Ranges Introduction\n\n## Introduction\n\nGenomic ranges are fundamental data structures in bioinformatics that represent intervals on chromosomes. They are essential for analyzing ChIP-seq peaks, gene annotations, regulatory elements, and other genomic features. In this tutorial, we'll explore the BED file format and demonstrate practical genomic range operations using R's rtracklayer package.\n\nThis tutorial will cover:\n\n- Understanding the BED file format\n- Loading genomic ranges from BED files\n- Basic exploration of genomic ranges\n- Accessing and manipulating genomic coordinates\n\n## The dataset\n\nWe'll use CTCF ChIP-seq peak data from the ENCODE project. CTCF (CCCTC-binding factor) is a key architectural protein that helps organize chromatin structure. The data is available in BED format, which we will load and analyze. Each peak represents the results of a ChIP-seq experiment, indicating regions where CTCF binds to DNA. The sample was sequenced, aligned, and peaks were called using standard ChIP-seq analysis pipelines. The peaks are stored in a BED file, which we will import into R for analysis.\n\n## The BED File Format\n\nThe Browser Extensible Data (BED) format is a standard way to represent genomic intervals. BED files are tab-delimited text files where each line represents a genomic feature.\n\n### BED Format Structure\n\nThe BED format has several required and optional fields:\n\n**Required fields (BED3):**\n\n- **chrom**: Chromosome name (e.g., chr1, chr2, chrX)\n- **chromStart**: Start position (0-based, inclusive)\n- **chromEnd**: End position (0-based, exclusive)\n\n**Optional fields:**\n\n- **name**: Feature name/identifier\n- **score**: Score (0-1000)\n- **strand**: Strand (+ or - OR '*')\n- **thickStart**: Start of thick drawing\n- **thickEnd**: End of thick drawing\n- **itemRgb**: RGB color values\n- **blockCount**: Number of blocks\n- **blockSizes**: Block sizes\n- **blockStarts**: Block start positions\n\n### Key Concepts\n\n- **0-based coordinate system**: BED uses 0-based coordinates where the first base is position 0\n- **Half-open intervals**: chromStart is inclusive, chromEnd is exclusive\n- **Width calculation**: Width = chromEnd - chromStart\n\nExample BED entry:\n```\nchr1    1000    2000    peak1    500    +\n```\nThis represents a feature named \"peak1\" on chromosome 1, from position 1000 to 1999 (width = 1000 bp).\n\n## Loading Required Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(rtracklayer)\nlibrary(GenomicRanges)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Set up plotting theme\ntheme_set(theme_minimal())\n```\n:::\n\n\n\n## Loading CTCF ChIP-seq Data\n\nWe'll work with CTCF ChIP-seq peak data from the ENCODE project. CTCF (CCCTC-binding factor) is a key architectural protein that helps organize chromatin structure. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# URL for the CTCF ChIP-seq BED file\nbed_url <- \"https://www.encodeproject.org/files/ENCFF960ZGP/@@download/ENCFF960ZGP.bed.gz\"\n\n# Let's first load this file using readr::read_table to check its structure\nctcf_peaks_raw <- readr::read_table(bed_url, col_names=FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  X1 = col_character(),\n  X2 = col_double(),\n  X3 = col_double(),\n  X4 = col_character(),\n  X5 = col_double(),\n  X6 = col_character(),\n  X7 = col_double(),\n  X8 = col_double(),\n  X9 = col_double(),\n  X10 = col_double()\n)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the first few rows of the raw data\nhead(ctcf_peaks_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  X1           X2        X3 X4       X5 X6       X7    X8    X9   X10\n  <chr>     <dbl>     <dbl> <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl>\n1 chr2  238305323 238305539 .      1000 .      7.70    -1 0.274   108\n2 chr20  49982706  49982922 .       541 .      8.72    -1 0.466   108\n3 chr15  39921015  39921231 .       672 .      9.08    -1 0.547   108\n4 chr8    6708273   6708489 .       560 .      9.86    -1 0.662   108\n5 chr9  136645956 136646172 .       584 .     10.2     -1 0.751   108\n6 chr7   47669294  47669510 .       614 .     10.5     -1 0.807   108\n```\n\n\n:::\n:::\n\n\nBioconductor's `rtracklayer` package provides a convenient way to import BED files directly into R as `GRanges` objects, which are optimized for genomic range operations. We'll use this package to load the CTCF peaks data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the BED file using rtracklayer\nctcf_peaks <- rtracklayer::import(bed_url, format=\"narrowPeak\")\n```\n:::\n\n\nLet's take a look at the loaded CTCF peaks data. The `ctcf_peaks` object is a `GRanges` object that contains genomic ranges representing the CTCF ChIP-seq peaks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nctcf_peaks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGRanges object with 43865 ranges and 6 metadata columns:\n          seqnames              ranges strand |        name     score\n             <Rle>           <IRanges>  <Rle> | <character> <numeric>\n      [1]     chr2 238305324-238305539      * |        <NA>      1000\n      [2]    chr20   49982707-49982922      * |        <NA>       541\n      [3]    chr15   39921016-39921231      * |        <NA>       672\n      [4]     chr8     6708274-6708489      * |        <NA>       560\n      [5]     chr9 136645957-136646172      * |        <NA>       584\n      ...      ...                 ...    ... .         ...       ...\n  [43861]    chr11   66222736-66222972      * |        <NA>      1000\n  [43862]    chr10   75235956-75236225      * |        <NA>      1000\n  [43863]    chr16   57649100-57649347      * |        <NA>      1000\n  [43864]    chr17   37373596-37373838      * |        <NA>      1000\n  [43865]    chr12   53676108-53676355      * |        <NA>      1000\n          signalValue    pValue    qValue      peak\n            <numeric> <numeric> <numeric> <integer>\n      [1]     7.70385        -1   0.27378       108\n      [2]     8.71626        -1   0.46571       108\n      [3]     9.07638        -1   0.54697       108\n      [4]     9.86234        -1   0.66189       108\n      [5]    10.15488        -1   0.75082       108\n      ...         ...       ...       ...       ...\n  [43861]     478.640        -1   4.87574       124\n  [43862]     480.183        -1   4.87574       141\n  [43863]     491.081        -1   4.87574       116\n  [43864]     491.991        -1   4.87574       127\n  [43865]     494.303        -1   4.87574       126\n  -------\n  seqinfo: 26 sequences from an unspecified genome; no seqlengths\n```\n\n\n:::\n:::\n\n\nThe `ctcf_peaks` object now contains the genomic ranges of CTCF peaks, including chromosome names, start and end positions, and additional metadata such as peak scores and strand information. \n\n## Understanding GRanges Objects\n\nTo get information from a `GRanges` object, we can use various accessor functions. For example, `seqnames()` retrieves the chromosome names, `start()` and `end()` get the start and end positions, and `width()` calculates the width of each peak.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Accessing chromosome names, start, end, and width\nlength(ctcf_peaks) # Total number of peaks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 43865\n```\n\n\n:::\n\n```{.r .cell-code}\nseqnames(ctcf_peaks) # Chromosome names (or contig names, etc.)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfactor-Rle of length 43865 with 41566 runs\n  Lengths:     1     1     1     1     1 ...     1     1     1     1     1\n  Values : chr2  chr20 chr15 chr8  chr9  ... chr11 chr10 chr16 chr17 chr12\nLevels(26): chr2 chr20 chr15 ... chr1_KI270714v1_random chrUn_GL000219v1\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(start(ctcf_peaks)) # Start positions (0-based)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 238305324  49982707  39921016   6708274 136645957  47669295\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(end(ctcf_peaks)) # End positions (1-based)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 238305539  49982922  39921231   6708489 136646172  47669510\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(width(ctcf_peaks)) # equivalent to end(ctcf_peaks) - start(ctcf_peaks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 216 216 216 216 216 216\n```\n\n\n:::\n:::\n\n\nWhat is the distribution of peak widths? We can visualize this using a histogram.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a histogram of peak widths\nhist(width(ctcf_peaks), breaks=50, main=\"CTCF Peak Widths\", xlab=\"Width (bp)\", col=\"lightblue\")\n```\n\n::: {.cell-output-display}\n![Histogram of CTCF Peak Widths. Why is there a large peak at around 200 bp?](genomic_ranges_tutorial_files/figure-html/peak-widths-1.png){width=672}\n:::\n:::\n\n\n\nThe \"metadata\" part of a `GRanges` object can be accessed using the `mcols()` function, which returns a data frame-like structure containing additional information about each genomic range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcols(ctcf_peaks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 43865 rows and 6 columns\n             name     score signalValue    pValue    qValue      peak\n      <character> <numeric>   <numeric> <numeric> <numeric> <integer>\n1              NA      1000     7.70385        -1   0.27378       108\n2              NA       541     8.71626        -1   0.46571       108\n3              NA       672     9.07638        -1   0.54697       108\n4              NA       560     9.86234        -1   0.66189       108\n5              NA       584    10.15488        -1   0.75082       108\n...           ...       ...         ...       ...       ...       ...\n43861          NA      1000     478.640        -1   4.87574       124\n43862          NA      1000     480.183        -1   4.87574       141\n43863          NA      1000     491.081        -1   4.87574       116\n43864          NA      1000     491.991        -1   4.87574       127\n43865          NA      1000     494.303        -1   4.87574       126\n```\n\n\n:::\n:::\n\n\nThe `mcols()` function returns a data frame-like structure containing additional information about each genomic range, such as peak scores and strand orientation. This metadata can be useful for filtering or annotating peaks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmcols(ctcf_peaks)[1:5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 5 rows and 6 columns\n         name     score signalValue    pValue    qValue      peak\n  <character> <numeric>   <numeric> <numeric> <numeric> <integer>\n1          NA      1000     7.70385        -1   0.27378       108\n2          NA       541     8.71626        -1   0.46571       108\n3          NA       672     9.07638        -1   0.54697       108\n4          NA       560     9.86234        -1   0.66189       108\n5          NA       584    10.15488        -1   0.75082       108\n```\n\n\n:::\n\n```{.r .cell-code}\nmcols(ctcf_peaks)$signalValue[1:5]  # Accessing the score column directly\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7.70385  8.71626  9.07638  9.86234 10.15488\n```\n\n\n:::\n\n```{.r .cell-code}\nhist(mcols(ctcf_peaks)$signalValue, breaks=50, main=\"CTCF Peak Scores\", xlab=\"Score\", col=\"lightblue\")\n```\n\n::: {.cell-output-display}\n![](genomic_ranges_tutorial_files/figure-html/mcols-cols-1.png){width=672}\n:::\n:::\n\n\n\n## Exploring Peak Characteristics\n\n### Basic Peak Statistics\n\nHow many peaks do we have? What chromosomes are represented? What is the range of peak widths? Let's calculate some basic statistics about the CTCF peaks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate basic statistics\ncat(\"=== CTCF Peak Statistics ===\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=== CTCF Peak Statistics ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Total number of peaks:\", length(ctcf_peaks), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTotal number of peaks: 43865 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Number of chromosomes represented:\", length(unique(seqnames(ctcf_peaks))), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNumber of chromosomes represented: 26 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Peak width range:\", min(width(ctcf_peaks)), \"-\", max(width(ctcf_peaks)), \"bp\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPeak width range: 54 - 442 bp\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Median peak width:\", median(width(ctcf_peaks)), \"bp\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMedian peak width: 216 bp\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Mean peak width:\", round(mean(width(ctcf_peaks)), 1), \"bp\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMean peak width: 181.1 bp\n```\n\n\n:::\n\n```{.r .cell-code}\n# Show chromosome names\ncat(\"\\nChromosomes present:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nChromosomes present:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(sort(unique(as.character(seqnames(ctcf_peaks)))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"chr1\"                    \"chr1_KI270714v1_random\" \n [3] \"chr10\"                   \"chr11\"                  \n [5] \"chr12\"                   \"chr13\"                  \n [7] \"chr14\"                   \"chr15\"                  \n [9] \"chr16\"                   \"chr17\"                  \n[11] \"chr17_GL000205v2_random\" \"chr18\"                  \n[13] \"chr19\"                   \"chr2\"                   \n[15] \"chr20\"                   \"chr21\"                  \n[17] \"chr22\"                   \"chr3\"                   \n[19] \"chr4\"                    \"chr5\"                   \n[21] \"chr6\"                    \"chr7\"                   \n[23] \"chr8\"                    \"chr9\"                   \n[25] \"chrUn_GL000219v1\"        \"chrX\"                   \n```\n\n\n:::\n:::\n\n\n### Peaks Per Chromosome\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count peaks per chromosome\npeaks_per_chr <- table(seqnames(ctcf_peaks))\npeaks_per_chr_df <- as.data.frame(peaks_per_chr)\npeaks_per_chr_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      Var1 Freq\n1                     chr2 3332\n2                    chr20 1236\n3                    chr15 1431\n4                     chr8 1935\n5                     chr9 1820\n6                     chr7 2140\n7                     chr4 2030\n8                    chr12 2274\n9                     chr5 2355\n10                   chr22  873\n11                    chr1 4207\n12                   chr17 2010\n13                    chr3 2808\n14                   chr11 2417\n15                   chr19 1662\n16                    chr6 2504\n17                   chr13 1030\n18                    chrX 1460\n19                   chr10 2037\n20                   chr16 1497\n21                   chr14 1461\n22                   chr21  406\n23                   chr18  932\n24 chr17_GL000205v2_random    4\n25  chr1_KI270714v1_random    1\n26        chrUn_GL000219v1    3\n```\n\n\n:::\n:::\n\n\n\n## Accessing Peak Coordinates\n\n### Finding Starts and Ends\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract start and end coordinates\npeak_starts <- start(ctcf_peaks)\npeak_ends <- end(ctcf_peaks)\npeak_centers <- start(ctcf_peaks) + (width(ctcf_peaks)/2)\n\nhead(peak_starts, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 238305324  49982707  39921016   6708274 136645957  47669295 136784479\n [8] 139453373 122421409 102583856\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(peak_ends, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 238305539  49982922  39921231   6708489 136646172  47669510 136784694\n [8] 139453588 122421624 102584071\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(peak_centers, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 238305432  49982815  39921124   6708382 136646065  47669403 136784587\n [8] 139453481 122421517 102583964\n```\n\n\n:::\n:::\n\n\n## Manipulating Peak Ranges\n\n### Shifting Peaks\n\nShifting peaks is useful for various analyses, such as creating flanking regions or adjusting peak positions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shift peaks by different amounts\npeaks_shifted_100bp <- shift(ctcf_peaks, 100)  # Shift right by 100bp\npeaks_shifted_neg50bp <- shift(ctcf_peaks, -50)  # Shift left by 50bp\n\ncat(\"=== Peak Shifting Examples ===\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=== Peak Shifting Examples ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Original peak 1:\", as.character(ctcf_peaks[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal peak 1: chr2:238305324-238305539 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Shifted +100bp:\", as.character(peaks_shifted_100bp[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShifted +100bp: chr2:238305424-238305639 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Shifted -50bp:\", as.character(peaks_shifted_neg50bp[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShifted -50bp: chr2:238305274-238305489 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Demonstrate that width is preserved during shifting\ncat(\"\\nWidths after shifting (should be unchanged):\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nWidths after shifting (should be unchanged):\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Original width:\", width(ctcf_peaks[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal width: 216 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Shifted +100bp width:\", width(peaks_shifted_100bp[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShifted +100bp width: 216 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Shifted -50bp width:\", width(peaks_shifted_neg50bp[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nShifted -50bp width: 216 \n```\n\n\n:::\n:::\n\n\n### Setting Peak Widths\n\nResizing peaks is common when standardizing peak sizes or creating fixed-width windows around peak centers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Resize peaks to fixed width (200bp) centered on original peak center\npeaks_200bp <- resize(ctcf_peaks, width = 200, fix = \"center\")\n\n# Resize peaks to 500bp, keeping the start position fixed\npeaks_500bp_start <- resize(ctcf_peaks, width = 500, fix = \"start\")\n\n# Resize peaks to 300bp, keeping the end position fixed\npeaks_300bp_end <- resize(ctcf_peaks, width = 300, fix = \"end\")\n\ncat(\"=== Peak Resizing Examples ===\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=== Peak Resizing Examples ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Original peak 1:\", as.character(ctcf_peaks[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal peak 1: chr2:238305324-238305539 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Resized to 200bp (center):\", as.character(peaks_200bp[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResized to 200bp (center): chr2:238305332-238305531 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Resized to 500bp (start fixed):\", as.character(peaks_500bp_start[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResized to 500bp (start fixed): chr2:238305324-238305823 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Resized to 300bp (end fixed):\", as.character(peaks_300bp_end[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResized to 300bp (end fixed): chr2:238305240-238305539 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Verify that all peaks now have the specified width\ncat(\"\\nWidth verification:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nWidth verification:\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"200bp resize - all widths 200?\", all(width(peaks_200bp) == 200), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n200bp resize - all widths 200? TRUE \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"500bp resize - all widths 500?\", all(width(peaks_500bp_start) == 500), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n500bp resize - all widths 500? TRUE \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"300bp resize - all widths 300?\", all(width(peaks_300bp_end) == 300), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n300bp resize - all widths 300? TRUE \n```\n\n\n:::\n:::\n\n\n### Creating Flanking Regions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create flanking regions around peaks\nupstream_1kb <- flank(ctcf_peaks, width = 1000, start = TRUE)\ndownstream_1kb <- flank(ctcf_peaks, width = 1000, start = FALSE)\n\n# Create regions extending in both directions\nextended_peaks <- resize(ctcf_peaks, width = width(ctcf_peaks) + 2000, fix = \"center\")\n\ncat(\"=== Flanking Region Examples ===\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=== Flanking Region Examples ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Original peak 1:\", as.character(ctcf_peaks[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOriginal peak 1: chr2:238305324-238305539 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"1kb upstream:\", as.character(upstream_1kb[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1kb upstream: chr2:238304324-238305323 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"1kb downstream:\", as.character(downstream_1kb[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1kb downstream: chr2:238305540-238306539 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Extended ±1kb:\", as.character(extended_peaks[1]), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nExtended ±1kb: chr2:238304324-238306539 \n```\n\n\n:::\n:::\n\n\n\n## Coverage\n\nCoverage refers to the number of times a genomic region is covered by ranges on a chromosome. A common use case is calculating coverage from ChIP-seq data, where we want to know how many reads overlap with each peak or for doing \"peak calling\" analysis.\n\nWe can make a toy example by simulating random reads of length 50 bp across a chromosome and then calculating coverage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate random reads on chromosome 1\nset.seed(42)  # For reproducibility\nchrom_length <- 1000000  # Length of chromosome 1\nnum_reads <- 100000\nread_length <- 50  # Length of each read\nrandom_starts <- sample(seq_len(chrom_length - read_length + 1), num_reads, replace = TRUE)\nrandom_reads <- GRanges(seqnames = \"chr1\",\n                         ranges = IRanges(start = random_starts, end = random_starts + read_length-1))\nrandom_reads\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGRanges object with 100000 ranges and 0 metadata columns:\n           seqnames        ranges strand\n              <Rle>     <IRanges>  <Rle>\n       [1]     chr1   61413-61462      *\n       [2]     chr1   54425-54474      *\n       [3]     chr1 623844-623893      *\n       [4]     chr1   74362-74411      *\n       [5]     chr1   46208-46257      *\n       ...      ...           ...    ...\n   [99996]     chr1 663489-663538      *\n   [99997]     chr1 886082-886131      *\n   [99998]     chr1 933222-933271      *\n   [99999]     chr1 486340-486389      *\n  [100000]     chr1 177556-177605      *\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n```\n\n\n:::\n:::\n\n\nWe are now ready to calculate the coverage of these random reads across the chromosome. The `coverage()` function from the `GenomicRanges` package computes the coverage of ranges in a `GRanges` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_coverage <- coverage(random_reads, width = chrom_length)\nhead(random_coverage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRleList of length 1\n$chr1\ninteger-Rle of length 1000000 with 173047 runs\n  Lengths:  7  1  6  3  8  8  1  1 22  1  4 ...  3  1  2  8 12 23  5  2  8  6\n  Values :  0  1  3  4  5  6  7  8  9  8  6 ...  3  2  3  4  5  4  3  2  1  0\n```\n\n\n:::\n:::\n\nWe can visualize the coverage of the random reads on chromosome 1. The `coverage()` function returns a `Rle` object, which is a run-length encoding of the coverage values.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(random_coverage[[1]][1:10000], main=\"Coverage of Random Reads on Chromosome 1\", xlab=\"Position\", ylab=\"Coverage\", type=\"h\", col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](genomic_ranges_tutorial_files/figure-html/coverage-plot-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the coverage of random reads across the first 10,000 bases of chromosome 1. The y-axis represents the number of reads covering each position, while the x-axis represents the genomic positions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate coverage density\nhist(as.numeric(random_coverage[[1]]), main=\"Coverage Density\", xlab=\"Coverage\", ylab=\"Frequency\", col=\"lightblue\")\n```\n\n::: {.cell-output-display}\n![](genomic_ranges_tutorial_files/figure-html/coverage-density-1.png){width=672}\n:::\n:::\n\n\n## Key Takeaways\n\nThis tutorial demonstrated several important concepts:\n\n1. **BED file format**: Understanding the structure and coordinate system of BED files\n2. **Loading genomic data**: Using rtracklayer to import BED files into R\n3. **Basic exploration**: Counting features, examining distributions, and summarizing data\n4. **Coordinate manipulation**: Accessing starts, ends, and performing coordinate arithmetic\n5. **Range operations**: Shifting, resizing, and creating flanking regions\n6. **Advanced analysis**: Finding overlaps and performing grouped operations\n\n### Common Use Cases\n\n- **Peak calling analysis**: Examining ChIP-seq peaks, ATAC-seq peaks, etc.\n- **Annotation overlap**: Finding genes or regulatory elements near peaks\n- **Comparative analysis**: Comparing peak sets between conditions or samples\n- **Motif analysis**: Creating sequences around peak centers for motif discovery\n- **Visualization**: Preparing data for genome browser tracks or custom plots\n\n### Best Practices\n\n1. Always check coordinate systems (0-based vs 1-based)\n2. Verify chromosome naming conventions match your reference genome\n3. Consider peak width distributions when setting analysis parameters\n4. Use appropriate genome builds for all analyses\n5. Document coordinate transformations and filtering steps\n\nThis foundation in genomic ranges and BED file manipulation will serve as a basis for more advanced genomic analyses in R.\n",
    "supporting": [
      "genomic_ranges_tutorial_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}