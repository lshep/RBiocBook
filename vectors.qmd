---
title: "Vectors"
---

## What is a Vector?

A vector is the simplest and most basic data structure in R. It is a
one-dimensional, ordered collection of elements, where all the elements are of
the same data type. Vectors can store various types of data, such as numeric,
character, or logical values.

In this chapter, we will provide a comprehensive overview of vectors, including
how to create, access, and manipulate them. We will also discuss some unique
properties and rules associated with vectors, and explore their applications in
data analysis tasks.

## Creating Vectors

In this section, we will cover different ways of creating vectors. The most
common method for creating vectors is by using the `c()` function, which stands
for "concatenate." The `c()` function combines its arguments into a single
vector.

Here's an example of creating a numeric vector:

```{r}
numeric_vector <- c(3, 5, 7, 9)
print(numeric_vector)
```

Similarly, you can create a character vector and a logical vector:

```{r}
character_vector <- c("apple", "banana", "cherry")
print(character_vector)
```

A logical vector is a one-dimensional array of logical values in R. Logical
values are either `TRUE` or `FALSE`, which represent the outcomes of logical
expressions or conditions. Logical vectors are used for a variety of purposes,
such as filtering data, controlling the flow of a program, or performing
element-wise comparisons between vectors.

In R, you can create a logical vector using the `c()` function by specifying
logical values as its arguments:

```{r}
logical_vector <- c(TRUE, FALSE, TRUE, FALSE)
```

::: {.callout-note}
The values `TRUE` and `FALSE` are reserved words in R, which means that they
cannot be used as variable names. If you try to assign a value to `TRUE` or
`FALSE`, R will throw an error. Also, notice that there are no quotation marks
around `TRUE` and `FALSE`. The value "TRUE" with quotes is a character vector
of length 1. 
:::

Logical vectors can also be generated by applying logical or comparison
operators on other vectors or values:

```{r}
numeric_vector <- c(1, 2, 3, 4, 5)
logical_vector <- numeric_vector > 3
```

In this example, `logical_vector` will contain the logical outcomes of the
comparison `numeric_vector > 3`, resulting in a logical vector with the values
`(FALSE, FALSE, FALSE, TRUE, TRUE)`.

```{r}
print(logical_vector)
```


You can also generate sequences using the `seq()` function or the `:` operator:

```{r}
sequence1 <- seq(from = 1, to = 10, by = 2)
print(sequence1)

sequence2 <- 1:5
print(sequence2)
```

The `rep()` function allows you to create a vector by repeating elements:

```{r}
repeated_vector <- rep(1:3, times = 2)
print(repeated_vector)
```

## Accessing Vector Elements

You can access and extract elements from vectors using indexing. In R, indexing
starts at 1. To access a single element, use square brackets `[]` and provide
the index of the desired element:

```{r}
numeric_vector <- c(3, 5, 7, 9)
third_element <- numeric_vector[3]
print(third_element)
```

To access multiple elements, provide a vector of indices:

```{r}
elements <- numeric_vector[c(1, 3)]
print(elements)
```

You can also modify and update vector elements using indexing:

```{r}
numeric_vector[2] <- 10
print(numeric_vector)
```


```{r, engine = 'tikz'}
\begin{tikzpicture}
\foreach \x in {0,1,2,3,4,5,6,7,8,9}
\draw (1,0) rectangle (\x,1);
\end{tikzpicture}
```

## Vector Operations

You can perform various vector operations, such as arithmetic, logical, and
comparison operations. The operations are performed element-wise, which means
that the operation is applied to each corresponding pair of elements in the
input vectors.

Here are some examples of arithmetic operations:

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)

sum_vectors <- vector1 + vector2
print(sum_vectors)

product_vectors <- vector1 * vector2
print(product_vectors)
```

Logical and comparison operations also work element-wise:

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(3, 2, 1)

equal_elements <- vector1 == vector2
print(equal_elements)

greater_elements <- vector1 > vector2
print(greater_elements)
```

Operations on a single vector are typically done element-by-element. For
example, we can add `2` to a vector, `2` is added to each element of the vector
and a new vector of the same length is returned.

```{r}
x = 1:10
x + 2
```

If the operation involves two vectors, the following rules apply. If the
vectors are the same length: R simply applies the operation to each pair of
elements.

```{r}
x + x
```

If the vectors are different lengths, but one length a multiple of the other, R
reuses the shorter vector as needed.

```{r}
x = 1:10
y = c(1,2)
x * y
```

If the vectors are different lengths, but one length *not* a multiple of the
other, R reuses the shorter vector as needed *and* delivers a
warning.

```{r}
x = 1:10
y = c(2,3,4)
x * y
```


Typical operations include multiplication ("\*"), addition,
subtraction, division, exponentiation ("\^"), but many operations
in R operate on vectors and are then called "vectorized".



## Named Vectors

Named vectors are vectors with labels or names assigned to their elements.
These names can be used to access and manipulate the elements in a more
meaningful way.

To create a named vector, use the `names()` function:

```{r}
fruit_prices <- c(0.5, 0.75, 1.25)
names(fruit_prices) <- c("apple", "banana", "cherry")
print(fruit_prices)
```

You can also access and modify elements using their names:

```{r}
banana_price <- fruit_prices["banana"]
print(banana_price)

fruit_prices["apple"] <- 0.6
print(fruit_prices)
```

## Vector Recycling and Recycling Rule

Vector recycling is a unique feature of R that allows for element-wise
operations on vectors of different lengths. When performing operations on
vectors of unequal length, R will recycle the shorter vector by repeating its
elements until it matches the length of the longer vector.

Here's an example of vector recycling:

```{r}
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5)

sum_vectors <- vector1 + vector2
print(sum_vectors)
```

In this example, `vector2` is shorter than `vector1`, so its elements are
recycled to match the length of `vector1`. The result is equivalent to adding
`vector1` to `c(4, 5, 4)`.

Be aware of the recycling rule when working with vectors of different lengths, as it may lead to unexpected results if you're not careful.

## Active Learning Exercises

Now that we have covered the basics of vectors, let's put your knowledge into practice with some active learning exercises.



In R, even a single value is a vector with length=1. 

```{r}
z = 1
z
length(z)
```

In the code above, we "assigned" the value 1 to the variable named `z`. Typing `z` by itself is an "expression" that returns a result which is, in this case, the value that we just assigned. The `length` method takes an R object and returns the R length. There are numerous ways of asking R about what an object represents, and `length` is one of them.


Vectors can contain numbers, strings (character data), or logical values
(`TRUE` and `FALSE`) or other "atomic" data types @tab-simpletypes. *Vectors cannot contain a mix of types!* We will
introduce another data structure, the R `list` for situations when we need to
store a mix of base R data types. 


|  Data type |  Stores  |
|-----------|------------------------|
|   numeric | floating point numbers |
|    integer|           integers     |
|   complex |      complex numbers   |
|   factor  |      categorical data  |
|  character|          strings       |
|   logical |      TRUE or FALSE     |
|     NA    |          missing       |
|     NULL   |           empty  |   
|   function |       function type    |

: Atomic (simplest) data types in R. {#tbl-simpletypes}

## Creating vectors

Character vectors (also sometimes called "string" vectors) are entered with each value
surrounded by single or double quotes; either is acceptable, but they
must match. They are always displayed by R with double quotes. Here are some examples of creating vectors:

```{r}
# examples of vectors
c('hello','world')
c(1,3,4,5,1,2)
c(1.12341e7,78234.126)
c(TRUE,FALSE,TRUE,TRUE)
# note how in the next case the TRUE is converted to "TRUE"
# with quotes around it.
c(TRUE,'hello')
```

We can also create vectors as "regular sequences" of numbers. For example:

```{r}
# create a vector of integers from 1 to 10
x = 1:10
# and backwards
x = 10:1
```

The `seq` function can create more flexible regular sequences. 
  
```{r}
# create a vector of numbers from 1 to 4 skipping by 0.3
y = seq(1,4,0.3)
```    


And creating a new vector by concatenating existing vectors is possible, as well.

```{r}
# create a sequence by concatenating two other sequences
z = c(y,x)
z
```


## Vector Operations

Operations on a single vector are typically done element-by-element. For example, we can add `2` to a vector, `2` is added to each element of the vector and a new vector of the same length is returned.

```{r}
x = 1:10
x + 2
```

If the operation involves two vectors, the following rules apply. If the vectors are the same length: R simply applies the operation to each pair of elements.

```{r}
x + x
```

If the vectors are different lengths, but one length a multiple of the other, R
reuses the shorter vector as needed.

```{r}
x = 1:10
y = c(1,2)
x * y
```

If the vectors are different lengths, but one length *not* a multiple of the
other, R reuses the shorter vector as needed *and* delivers a
warning.

```{r}
x = 1:10
y = c(2,3,4)
x * y
```


Typical operations include multiplication ("\*"), addition,
subtraction, division, exponentiation ("\^"), but many operations
in R operate on vectors and are then called "vectorized".

## Logical Vectors

Logical vectors are vectors composed on only the values `TRUE` and
`FALSE`. Note the all-upper-case and no quotation marks.

```{r}
a = c(TRUE,FALSE,TRUE)

# we can also create a logical vector from a numeric vector
# 0 = false, everything else is 1
b = c(1,0,217)
d = as.logical(b)
d
# test if a and d are the same at every element
all.equal(a,d)

# We can also convert from logical to numeric
as.numeric(a)
```

### Logical Operators

Some operators like `<, >, ==, >=, <=, !=` can be used to create logical
vectors.

```{r}
# create a numeric vector
x = 1:10
# testing whether x > 5 creates a logical vector
x > 5
x <= 5
x != 5
x == 5
```

We can also assign the results to a variable:

```{r}
y = (x == 5)
y
```


## Indexing Vectors

In R, an index is used to refer to a specific element or
set of elements in an vector (or other data structure). [R uses `[` and `]` to perform indexing,
although other approaches to getting subsets of larger data
structures are common in R.

```{r}
x = seq(0,1,0.1)
# create a new vector from the 4th element of x
x[4]
```

We can even use other vectors to perform the "indexing".

```{r}
x[c(3,5,6)]
y = 3:6
x[y]
```


Combining the concept of indexing with the concept of logical vectors
results in a very power combination.


```{r}
# use help('rnorm') to figure out what is happening next
myvec = rnorm(10)

# create logical vector that is TRUE where myvec is >0.25
gt1 = (myvec > 0.25)
sum(gt1)
# and use our logical vector to create a vector of myvec values that are >0.25
myvec[gt1]
# or <=0.25 using the logical "not" operator, "!"
myvec[!gt1]
# shorter, one line approach
myvec[myvec > 0.25]
```


## Character Vectors, A.K.A. Strings

R uses the `paste` function to concatenate strings.

```{r}
paste("abc","def")
paste("abc","def",sep="THISSEP")
paste0("abc","def")
## [1] "abcdef"
paste(c("X","Y"),1:10)
paste(c("X","Y"),1:10,sep="_")
```

We can count the number of characters in a string.

```{r}
nchar('abc')
nchar(c('abc','d',123456))
```
        
Pulling out parts of strings is also sometimes useful.

```{r}
substr('This is a good sentence.',start=10,stop=15)
```

Another common operation is to replace something in a string with something (a find-and-replace).

```{r}
sub('This','That','This is a good sentence.')
```

When we want to find all strings that match some other string, we can use `grep`, or "grab regular expression".

```{r}
grep('bcd',c('abcdef','abcd','bcde','cdef','defg'))
grep('bcd',c('abcdef','abcd','bcde','cdef','defg'),value=TRUE)
```

Read about the `grepl` function (`?grepl`). Use that function to
return a logical vector (TRUE/FALSE) for each entry above with an `a`
in it.

## Missing Values, AKA “NA”

R has a special value, “NA”, that represents a “missing” value, or *Not Available*, in a
vector or other data structure. Here, we just create a vector to experiment.

```{r}
x = 1:5
x
length(x)
```

```{r}
is.na(x)
x[2] = NA
x
```
The length of `x` is unchanged, but there is one value that is marked as "missing" by virtue of being `NA`.

```{r}
length(x)
is.na(x)
```

We can remove `NA` values by using indexing. In the following, `is.na(x)` returns a logical vector the
length of `x`. The `!` is the logical _NOT_ operator and converts `TRUE` to `FALSE` and vice-versa.

```{r}
x[!is.na(x)]
```


## Exercises

1.  Create a numeric vector called `temperatures` containing the following values: 72, 75, 78, 81, 76, 73.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    temperatures <- c(72, 75, 78, 81, 76, 73, 93)
    ```

1.  Create a character vector called `days` containing the following values: "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday".

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
    ```

3.  Calculate the average temperature for the week and store it in a variable called `average_temperature`.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    average_temperature <- mean(temperatures)
    ```

4.  Create a named vector called `weekly_temperatures`, where the names are the days of the week and the values are the temperatures from the `temperatures` vector.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    weekly_temperatures <- temperatures
    names(weekly_temperatures) <- days
    ```

5.  Create a numeric vector called `ages` containing the following values: 25, 30, 35, 40, 45, 50, 55, 60.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    ages <- c(25, 30, 35, 40, 45, 50, 55, 60)
    ```

6.  Create a logical vector called `is_adult` by checking if the elements in the `ages` vector are greater than or equal to 18.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    is_adult <- ages >= 18
    ```

7.  Calculate the sum and product of the `ages` vector.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    sum_ages <- sum(ages)
    product_ages <- prod(ages)
    ```

8.  Extract the ages greater than or equal to 40 from the `ages` vector and store them in a variable called `older_ages`.

    ```{r}
    #| code-fold: true
    #| code-summary: Show answer
    older_ages <- ages[ages >= 40]
    ```
