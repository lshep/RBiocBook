{
  "hash": "875c6aadfd48b432c47f445c92e2c3a8",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction to `SummarizedExperiment`\n\n<!-- This is taken from the summarizedExperiment package vignette -->\n\nThe `SummarizedExperiment` class is used to store rectangular matrices of\nexperimental results, which are commonly produced by sequencing and microarray\nexperiments.  Each object stores observations of one or more samples, along\nwith additional meta-data describing both the observations (features) and\nsamples (phenotypes).\n\nA key aspect of the `SummarizedExperiment` class is the coordination of the\nmeta-data and assays when subsetting. For example, if you want to exclude a\ngiven sample you can do for both the meta-data and assay in one operation,\nwhich ensures the meta-data and observed data will remain in sync.  Improperly\naccounting for meta and observational data has resulted in a number of\nincorrect results and retractions so this is a very desirable\nproperty.\n\n`SummarizedExperiment` is in many ways similar to the historical\n`ExpressionSet`, the main distinction being that `SummarizedExperiment` is more\nflexible in it's row information, allowing both `GRanges` based as well as those\ndescribed by arbitrary `DataFrame`s.  This makes it ideally suited to a variety\nof experiments, particularly sequencing based experiments such as RNA-Seq and\nChIp-Seq.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install('airway')\nBiocManager::install('SummarizedExperiment')\n```\n:::\n\n\n##  Anatomy of a `SummarizedExperiment`\n\nThe _SummarizedExperiment_ package contains two classes: \n`SummarizedExperiment` and `RangedSummarizedExperiment`.\n\n`SummarizedExperiment` is a matrix-like container where rows represent features\nof interest (e.g. genes, transcripts, exons, etc.) and columns represent\nsamples. The objects contain one or more assays, each represented by a\nmatrix-like object of numeric or other mode. The rows of a\n`SummarizedExperiment` object represent features of interest.  Information\nabout these features is stored in a `DataFrame` object, accessible using the\nfunction `rowData()`. Each row of the `DataFrame` provides information on the\nfeature in the corresponding row of the `SummarizedExperiment` object. Columns\nof the DataFrame represent different attributes of the features of interest,\ne.g., gene or transcript IDs, etc.\n\n`RangedSummarizedExperiment` is the \"child\"\" of the `SummarizedExperiment` class\nwhich means that all the methods on `SummarizedExperiment` also work on a\n`RangedSummarizedExperiment`.\n\nThe fundamental difference between the two classes is that the rows of a\n`RangedSummarizedExperiment` object represent genomic ranges of interest\ninstead of a `DataFrame` of features. The `RangedSummarizedExperiment` ranges\nare described by a `GRanges` or a `GRangesList` object, accessible using the\n`rowRanges()` function.\n\n@fig-se-diagram displays the class geometry and highlights the\nvertical (column) and horizontal (row) relationships.\n\n\n![Summarized Experiment. There are three main components, the `colData()`, the `rowData()` and the `assays()`. The accessors for the various parts of a complete SummarizedExperiment object match the names. ](images/se.png){#fig-se-diagram}\n\n### Assays\n\nThe `airway` package contains an example dataset from an RNA-Seq experiment of\nread counts per gene for airway smooth muscles.  These data are stored\nin a `RangedSummarizedExperiment` object which contains 8 different\nexperimental and assays 64,102 gene transcripts.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: airway\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(SummarizedExperiment)\ndata(airway, package=\"airway\")\nse <- airway\nse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 63677 8 \nmetadata(1): ''\nassays(1): counts\nrownames(63677): ENSG00000000003 ENSG00000000005 ... ENSG00000273492\n  ENSG00000273493\nrowData names(10): gene_id gene_name ... seq_coord_system symbol\ncolnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521\ncolData names(9): SampleName cell ... Sample BioSample\n```\n\n\n:::\n:::\n\n\nTo retrieve the experiment data from a `SummarizedExperiment` object one can\nuse the `assays()` accessor.  An object can have multiple assay datasets\neach of which can be accessed using the `$` operator.\nThe `airway` dataset contains only one assay (`counts`).  Here each row\nrepresents a gene transcript and each column one of the samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassays(se)$counts\n```\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|                | SRR1039508| SRR1039509| SRR1039512| SRR1039513| SRR1039516| SRR1039517| SRR1039520| SRR1039521|\n|:---------------|----------:|----------:|----------:|----------:|----------:|----------:|----------:|----------:|\n|ENSG00000000003 |        679|        448|        873|        408|       1138|       1047|        770|        572|\n|ENSG00000000005 |          0|          0|          0|          0|          0|          0|          0|          0|\n|ENSG00000000419 |        467|        515|        621|        365|        587|        799|        417|        508|\n|ENSG00000000457 |        260|        211|        263|        164|        245|        331|        233|        229|\n|ENSG00000000460 |         60|         55|         40|         35|         78|         63|         76|         60|\n|ENSG00000000938 |          0|          0|          2|          0|          1|          0|          0|          0|\n|ENSG00000000971 |       3251|       3679|       6177|       4252|       6721|      11027|       5176|       7995|\n|ENSG00000001036 |       1433|       1062|       1733|        881|       1424|       1439|       1359|       1109|\n|ENSG00000001084 |        519|        380|        595|        493|        820|        714|        696|        704|\n|ENSG00000001167 |        394|        236|        464|        175|        658|        584|        360|        269|\n\n\n:::\n:::\n\n\n### 'Row' (regions-of-interest) data\n\nThe `rowRanges()` accessor is used to view the range information for a\n`RangedSummarizedExperiment`. (Note if this were the parent \n`SummarizedExperiment` class we'd use `rowData()`). The data are stored in a \n`GRangesList` object, where each list element corresponds to one gene \ntranscript and the ranges in each `GRanges` correspond to the exons in the\ntranscript.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrowRanges(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGRangesList object of length 63677:\n$ENSG00000000003\nGRanges object with 17 ranges and 2 metadata columns:\n       seqnames            ranges strand |   exon_id       exon_name\n          <Rle>         <IRanges>  <Rle> | <integer>     <character>\n   [1]        X 99883667-99884983      - |    667145 ENSE00001459322\n   [2]        X 99885756-99885863      - |    667146 ENSE00000868868\n   [3]        X 99887482-99887565      - |    667147 ENSE00000401072\n   [4]        X 99887538-99887565      - |    667148 ENSE00001849132\n   [5]        X 99888402-99888536      - |    667149 ENSE00003554016\n   ...      ...               ...    ... .       ...             ...\n  [13]        X 99890555-99890743      - |    667156 ENSE00003512331\n  [14]        X 99891188-99891686      - |    667158 ENSE00001886883\n  [15]        X 99891605-99891803      - |    667159 ENSE00001855382\n  [16]        X 99891790-99892101      - |    667160 ENSE00001863395\n  [17]        X 99894942-99894988      - |    667161 ENSE00001828996\n  -------\n  seqinfo: 722 sequences (1 circular) from an unspecified genome\n\n...\n<63676 more elements>\n```\n\n\n:::\n:::\n\n\n### 'Column' (sample) data\n\nSample meta-data describing the samples can be accessed using `colData()`, and\nis a `DataFrame` that can store any number of descriptive columns for each\nsample row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolData(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 8 rows and 9 columns\n           SampleName     cell      dex    albut        Run avgLength\n             <factor> <factor> <factor> <factor>   <factor> <integer>\nSRR1039508 GSM1275862  N61311     untrt    untrt SRR1039508       126\nSRR1039509 GSM1275863  N61311     trt      untrt SRR1039509       126\nSRR1039512 GSM1275866  N052611    untrt    untrt SRR1039512       126\nSRR1039513 GSM1275867  N052611    trt      untrt SRR1039513        87\nSRR1039516 GSM1275870  N080611    untrt    untrt SRR1039516       120\nSRR1039517 GSM1275871  N080611    trt      untrt SRR1039517       126\nSRR1039520 GSM1275874  N061011    untrt    untrt SRR1039520       101\nSRR1039521 GSM1275875  N061011    trt      untrt SRR1039521        98\n           Experiment    Sample    BioSample\n             <factor>  <factor>     <factor>\nSRR1039508  SRX384345 SRS508568 SAMN02422669\nSRR1039509  SRX384346 SRS508567 SAMN02422675\nSRR1039512  SRX384349 SRS508571 SAMN02422678\nSRR1039513  SRX384350 SRS508572 SAMN02422670\nSRR1039516  SRX384353 SRS508575 SAMN02422682\nSRR1039517  SRX384354 SRS508576 SAMN02422673\nSRR1039520  SRX384357 SRS508579 SAMN02422683\nSRR1039521  SRX384358 SRS508580 SAMN02422677\n```\n\n\n:::\n:::\n\n\nThis sample metadata can be accessed using the `$` accessor which makes it \neasy to subset the entire object by a given phenotype.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset for only those samples treated with dexamethasone\nse[, se$dex == \"trt\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 63677 4 \nmetadata(1): ''\nassays(1): counts\nrownames(63677): ENSG00000000003 ENSG00000000005 ... ENSG00000273492\n  ENSG00000273493\nrowData names(10): gene_id gene_name ... seq_coord_system symbol\ncolnames(4): SRR1039509 SRR1039513 SRR1039517 SRR1039521\ncolData names(9): SampleName cell ... Sample BioSample\n```\n\n\n:::\n:::\n\n\n### Experiment-wide metadata\n\nMeta-data describing the experimental methods and publication references can be\naccessed using `metadata()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetadata(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nExperiment data\n  Experimenter name: Himes BE \n  Laboratory: NA \n  Contact information:  \n  Title: RNA-Seq transcriptome profiling identifies CRISPLD2 as a glucocorticoid responsive gene that modulates cytokine function in airway smooth muscle cells. \n  URL: http://www.ncbi.nlm.nih.gov/pubmed/24926665 \n  PMIDs: 24926665 \n\n  Abstract: A 226 word abstract is available. Use 'abstract' method.\n```\n\n\n:::\n:::\n\n\nNote that `metadata()` is just a simple list, so it is appropriate for _any_\nexperiment wide metadata the user wishes to save, such as storing model\nformulas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetadata(se)$formula <- counts ~ dex + albut\n\nmetadata(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\nExperiment data\n  Experimenter name: Himes BE \n  Laboratory: NA \n  Contact information:  \n  Title: RNA-Seq transcriptome profiling identifies CRISPLD2 as a glucocorticoid responsive gene that modulates cytokine function in airway smooth muscle cells. \n  URL: http://www.ncbi.nlm.nih.gov/pubmed/24926665 \n  PMIDs: 24926665 \n\n  Abstract: A 226 word abstract is available. Use 'abstract' method.\n\n$formula\ncounts ~ dex + albut\n```\n\n\n:::\n:::\n\n\n## Common operations on `SummarizedExperiment`\n\n### Subsetting\n\n- `[` Performs two dimensional subsetting, just like subsetting a matrix\n    or data frame.\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset the first five transcripts and first three samples\nse[1:5, 1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 5 3 \nmetadata(2): '' formula\nassays(1): counts\nrownames(5): ENSG00000000003 ENSG00000000005 ENSG00000000419\n  ENSG00000000457 ENSG00000000460\nrowData names(10): gene_id gene_name ... seq_coord_system symbol\ncolnames(3): SRR1039508 SRR1039509 SRR1039512\ncolData names(9): SampleName cell ... Sample BioSample\n```\n\n\n:::\n:::\n\n- `$` operates on `colData()` columns, for easy sample extraction.\n\n::: {.cell}\n\n```{.r .cell-code}\nse[, se$cell == \"N61311\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 63677 2 \nmetadata(2): '' formula\nassays(1): counts\nrownames(63677): ENSG00000000003 ENSG00000000005 ... ENSG00000273492\n  ENSG00000273493\nrowData names(10): gene_id gene_name ... seq_coord_system symbol\ncolnames(2): SRR1039508 SRR1039509\ncolData names(9): SampleName cell ... Sample BioSample\n```\n\n\n:::\n:::\n\n\n### Getters and setters\n\n- `rowRanges()` / (`rowData()`), `colData()`, `metadata()`\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- matrix(1:15, 5, 3, dimnames=list(LETTERS[1:5], LETTERS[1:3]))\n\ndates <- SummarizedExperiment(assays=list(counts=counts),\n                              rowData=DataFrame(month=month.name[1:5], day=1:5))\n\n# Subset all January assays\ndates[rowData(dates)$month == \"January\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: SummarizedExperiment \ndim: 1 3 \nmetadata(0):\nassays(1): counts\nrownames(1): A\nrowData names(2): month day\ncolnames(3): A B C\ncolData names(0):\n```\n\n\n:::\n:::\n\n\n- `assay()` versus `assays()`\nThere are two accessor functions for extracting the assay data from a\n`SummarizedExperiment` object.  `assays()` operates on the entire list of assay\ndata as a whole, while `assay()` operates on only one assay at a time.\n`assay(x, i)` is simply a convenience function which is equivalent to\n`assays(x)[[i]]`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassays(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of length 1\nnames(1): counts\n```\n\n\n:::\n\n```{.r .cell-code}\nassays(se)[[1]][1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516\nENSG00000000003        679        448        873        408       1138\nENSG00000000005          0          0          0          0          0\nENSG00000000419        467        515        621        365        587\nENSG00000000457        260        211        263        164        245\nENSG00000000460         60         55         40         35         78\n```\n\n\n:::\n\n```{.r .cell-code}\n# assay defaults to the first assay if no i is given\nassay(se)[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516\nENSG00000000003        679        448        873        408       1138\nENSG00000000005          0          0          0          0          0\nENSG00000000419        467        515        621        365        587\nENSG00000000457        260        211        263        164        245\nENSG00000000460         60         55         40         35         78\n```\n\n\n:::\n\n```{.r .cell-code}\nassay(se, 1)[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516\nENSG00000000003        679        448        873        408       1138\nENSG00000000005          0          0          0          0          0\nENSG00000000419        467        515        621        365        587\nENSG00000000457        260        211        263        164        245\nENSG00000000460         60         55         40         35         78\n```\n\n\n:::\n:::\n\n\n### Range-based operations\n\n- `subsetByOverlaps()`\n`SummarizedExperiment` objects support all of the `findOverlaps()` methods and\nassociated functions.  This includes `subsetByOverlaps()`, which makes it easy\nto subset a `SummarizedExperiment` object by an interval.\n\nIn tne next code block, we define a region of interest (or many regions of interest)\nand then subset our `SummarizedExperiment` by overlaps with this region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset for only rows which are in the interval 100,000 to 110,000 of\n# chromosome 1\nroi <- GRanges(seqnames=\"1\", ranges=100000:1100000)\nsub_se = subsetByOverlaps(se, roi)\nsub_se\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: RangedSummarizedExperiment \ndim: 74 8 \nmetadata(2): '' formula\nassays(1): counts\nrownames(74): ENSG00000131591 ENSG00000177757 ... ENSG00000272512\n  ENSG00000273443\nrowData names(10): gene_id gene_name ... seq_coord_system symbol\ncolnames(8): SRR1039508 SRR1039509 ... SRR1039520 SRR1039521\ncolData names(9): SampleName cell ... Sample BioSample\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(sub_se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 74  8\n```\n\n\n:::\n:::\n\n\n\n## Constructing a `SummarizedExperiment` \n\nTo construct a `SummarizedExperiment` object, you need to provide the following\ncomponents:\n- `assays`: A list of matrices or matrix-like objects containing the data.\n- `rowData`: A `DataFrame` containing information about the features (rows).\n- `colData`: A `DataFrame` containing information about the samples (columns).\n- +/- `metadata`: A list containing additional metadata about the experiment.\n\nFor a nearly real example, we will use the DeRisi dataset. We'll start with the\noriginal data, which is a `data.frame` with the first couple of columns containing\nthe gene information and the rest of the columns containing the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the DeRisi dataset\ndeRisi <- read.csv(\"https://raw.githubusercontent.com/seandavi/RBiocBook/refs/heads/main/data/derisi.csv\")\nhead(deRisi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ORF  Name    R1    R2    R3    R4   R5   R6    R7 R1.Bkg R2.Bkg R3.Bkg\n1 YHR007C ERG11  7896  7484 14679 14617 9853 7599  6490   1155   1984   1323\n2 YBR218C  PYC2 12144 11177 10241  4820 4950 7047 17035   1074   1694   1243\n3 YAL051W FUN43  4478  6435  6230  6848 5111 7180  4497   1140   1950   1649\n4 YAL053W        6343  8243  6743  3304 3556 4694  3849   1020   1897   1196\n5 YAL054C  ACS1  1542  3044  2076  1695 1753 4806 10802   1082   1940   1504\n6 YAL055W        1769  3243  2094  1367 1853 3580  1956    975   1821   1185\n  R4.Bkg R5.Bkg R6.Bkg R7.Bkg    G1    G2    G3    G4    G5    G6    G7 G1.Bkg\n1   1171    914   2445    981  8432  7173 11736 16798 12315 16111 13931   2404\n2    876   1211   2444    742 11509 10226 13372  6500  6255  9024  6904   2148\n3   1183    898   2637    927  5865  5895  5345  6302  5400  7933  5026   2422\n4    881   1045   2518    697  6762  7454  6323  3595  4689  5660  4145   2107\n5   1108    902   2610    980  3138  3785  2419  2114  2763  3561  1897   2405\n6    851   1047   2536    698  2844  4069  2583  1651  2530  3484  1550   1674\n  G2.Bkg G3.Bkg G4.Bkg G5.Bkg G6.Bkg G7.Bkg\n1   2561   1598   1506   1696   2667   1244\n2   2527   1641   1196   1553   2569    848\n3   2496   1902   1501   1644   2808   1154\n4   2663   1607   1162   1577   2544    857\n5   2528   1847   1445   1713   2767   1142\n6   2648   1591   1114   1528   2668    870\n```\n\n\n:::\n:::\n\n\nTo convert this to a `SummarizedExperiment`, we need to extract the assay data, row data, and column data. The assay data will be the numeric values in the data frame, the row data will be the gene information, and the column data will be the sample information.\n\n### rowData, or feature information\n\nLet's start with the rowData, which will be a `DataFrame` containing the gene information. We can use the first two columns of the data frame for this purpose.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdata <- deRisi[, 1:2]\nhead(rdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ORF  Name\n1 YHR007C ERG11\n2 YBR218C  PYC2\n3 YAL051W FUN43\n4 YAL053W      \n5 YAL054C  ACS1\n6 YAL055W      \n```\n\n\n:::\n:::\n\n\n### colData, or sample information\n\nNext, we will create the colData, which will be a `DataFrame` containing the sample information. Since the sample information really isn't in the dataset, we will create a simple `DataFrame` with sample names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncdata <- DataFrame(sample=paste(\"Sample\", 0:6), timepoint = 0:6,\n    hours = c(0, 9.5,11.5,13.5,15.5,18.5,20.5))\nhead(cdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDataFrame with 6 rows and 3 columns\n       sample timepoint     hours\n  <character> <integer> <numeric>\n1    Sample 0         0       0.0\n2    Sample 1         1       9.5\n3    Sample 2         2      11.5\n4    Sample 3         3      13.5\n5    Sample 4         4      15.5\n6    Sample 5         5      18.5\n```\n\n\n:::\n:::\n\n\n### assays, or the data\n\nRemember that the DeRisi dataset has four _different_ assays, \n\n| assay | description |\n|-------|-------------|\n| R | Red fluorescence |\n| G | Green luorescence |\n| Rb | Red background fluorescence |\n| Gb | Green background fluorescence |\n\nWe will create a list of matrices, one for each assay. The matrices will be the numeric values in the data frame, excluding the first two columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR <- as.matrix(deRisi[, 3:9])\nG <- as.matrix(deRisi[, 10:16])\nRb <- as.matrix(deRisi[, 17:23])\nGb <- as.matrix(deRisi[, 24:30])\n```\n:::\n\n\nWhen we create a SummarizedExperiment object, the \"constructor\" will check to see\nthat the colnames of the matrices in the list are the same as the _rownames_ of the \n`colData` `DataFrame`, and that the rownames of the matrices in the list are the same as the _rownames_ of the `rowData` `DataFrame`.\n\nSo, we need to fix that all up. Let's start wit the rownames of the `rowData` `DataFrame`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(rdata) <- rdata$ORF\n```\n:::\n\n\nNow, let's set the rownames of the coldata `DataFrame` to the sample names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(cdata) <- cdata$sample\n```\n:::\n\n\nNow, we can fix the rownames and colnames of the matrices for our R, G, Rb, and Gb assays:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(R) <- rdata$ORF\nrownames(G) <- rdata$ORF\nrownames(Rb) <- rdata$ORF\nrownames(Gb) <- rdata$ORF\ncolnames(R) <- cdata$sample\ncolnames(G) <- cdata$sample\ncolnames(Rb) <- cdata$sample\ncolnames(Gb) <- cdata$sample\n```\n:::\n\n\nTake a look at the matrices to make sure they look right.\n\n### Putting it all together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nse <- SummarizedExperiment(assays=list(R=R, G=G, Rb=Rb, Gb=Gb), rowData=rdata, colData=cdata)\n```\n:::\n\n\n### Getting logRatios\n\nNow that we have a `SummarizedExperiment` object, we can easily compute the log ratios of the Red and Green foreground fluorescence. This is a common operation in microarray data analysis. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogRatios <- log2(\n    (assay(se, \"R\") - assay(se, \"Rb\")) / (assay(se, \"G\") - assay(se, \"Gb\"))\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NaNs produced\n```\n\n\n:::\n\n```{.r .cell-code}\nassays(se)$logRatios <- logRatios\n```\n:::\n\n\nNow, we've added a new assay to the `SummarizedExperiment` object called `logRatios`. This assay contains the log ratios of the Red and Green foreground fluorescence. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nassays(se)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of length 5\nnames(5): R G Rb Gb logRatios\n```\n\n\n:::\n:::\n\n\nAnd if we want to access the log ratios, we can do so using the `assay()` method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(assay(se, \"logRatios\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Sample 0     Sample 1  Sample 2   Sample 3   Sample 4 Sample 5\nYHR007C -1.2204686          NaN       NaN 2.70275677  1.6545902 5.260867\nYBR218C        NaN          NaN 2.9757832 2.39231742  1.9319816 3.983313\nYAL051W  0.1135715          NaN       NaN        NaN -1.3681061 2.138654\nYAL053W -1.3753298          NaN       NaN 0.05044902  1.0906497 5.215440\nYAL054C  0.2706476  0.333657387 0.0000000 0.31420165  0.3165815      NaN\nYAL055W  0.6209723 -0.001745548 0.2683547 0.11082813  0.4931189      NaN\n         Sample 6\nYHR007C 4.8223618\nYBR218C       NaN\nYAL051W 1.2205754\nYAL053W 0.8875253\nYAL054C       NaN\nYAL055W       NaN\n```\n\n\n:::\n\n```{.r .cell-code}\n## OR\nhead(assays(se)$logRatios)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Sample 0     Sample 1  Sample 2   Sample 3   Sample 4 Sample 5\nYHR007C -1.2204686          NaN       NaN 2.70275677  1.6545902 5.260867\nYBR218C        NaN          NaN 2.9757832 2.39231742  1.9319816 3.983313\nYAL051W  0.1135715          NaN       NaN        NaN -1.3681061 2.138654\nYAL053W -1.3753298          NaN       NaN 0.05044902  1.0906497 5.215440\nYAL054C  0.2706476  0.333657387 0.0000000 0.31420165  0.3165815      NaN\nYAL055W  0.6209723 -0.001745548 0.2683547 0.11082813  0.4931189      NaN\n         Sample 6\nYHR007C 4.8223618\nYBR218C       NaN\nYAL051W 1.2205754\nYAL053W 0.8875253\nYAL054C       NaN\nYAL055W       NaN\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(assays(se)$logRatios, breaks=50, main=\"Log Ratios of Red and Green Foreground Fluorescence\", xlab=\"Log Ratio\")\n```\n\n::: {.cell-output-display}\n![](bioc-summarizedexperiment_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "bioc-summarizedexperiment_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}