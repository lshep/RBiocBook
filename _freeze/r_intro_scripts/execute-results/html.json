{
  "hash": "ce370d8c6af241de0b2c3a109712ea7a",
  "result": {
    "engine": "knitr",
    "markdown": "# R mechanics\n\n\n## Starting R\n\nHow to start R depends a bit on the operating system (Mac, Windows,\nLinux) and what Integrated Development Environment (IDE) you are using.  In this course, we will largely be using *RStudio*, but there\nis nothing to prohibit using R at the command line or in some other\ninterface. \n\nIf you are using RStudio, you can start R by opening the\napplication. If you are using R at the command line, you can start R by\ntyping `R` in the terminal. If you are using R in a different IDE, you\ncan start R by following the instructions for that IDE.\n\n\n## Interacting with R\n\nInterestingly, no matter how you start R, the way you interact with it is\nthe same. R is a command-line interface, which means that you type commands\ninto a console and R executes them. This is different from graphical userinterfaces (GUIs) that you may be used to, where you click buttons and\nmenus to perform actions. In R, you type commands into the console, and R\nexecutes them immediately. This can be intimidating at first, but it is also\nwhat makes R so powerful. You can write scripts to automate tasks, create\nfunctions to encapsulate complex operations, and use packages to extend the\nfunctionality of R.\n\n\nAt the most basic level, anything that we type at the command line will fall into one of two categories:\n\n1.  Assignments\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x = 1\n    y <- 2\n    ```\n    :::\n\n    \n2.  Expressions\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    1 + pi + sin(42)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3.225071\n    ```\n    \n    \n    :::\n    :::\n\n\nThe assignment type is obvious because either the The `<-` or `=` are used. Note that when we type expressions, R will return a result.  In this case, the result of R evaluating `1 + pi + sin(42)` is 3.2250711.\n\n::: {.callout-tip}\nYou can use either `<-` or `=` for assignments in R, but it is recommended to use `<-` for consistency and readability. Note that you can also use `->` to assign values to the left, but this is less common and can be confusing just becasuse it is not the standard way to assign values in R.\n:::\n\nThe standard R prompt is a \">\" sign. When present, R is waiting for the next expression or assignment.  If a line is not a complete R command, R will continue the next line with a \"+\". For example, typing the fillowing with a \"Return\" after the second \"+\" will result in R giving back a \"+\" on the next line, a prompt to keep typing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + pi +\nsin(3.7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.611757\n```\n\n\n:::\n:::\n\n\nR can be used as a glorified calculator by using R expressions. Mathematical operations include:\n\n- Addition: `+`\n- Subtraction: `-`\n- Multiplication: `*`\n- Division: `/`\n- Exponentiation: `^`\n- Modulo: `%%`\n\nThe `^` operator raises the number to its left to the power of the number to its right: for example `3^2` is `9`.\nThe modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or `5 %% 3` is 2.\n\n### Expressions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 2\n28 %% 3\n3^2\n5 + 4 * 4 + 4 ^ 4 / 10\n```\n:::\n\n\nNote that R follows order-of-operations and groupings based on parentheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 + 4 / 9\n(5 + 4) / 9\n```\n:::\n\n\n### Assignment\n\nWhile using R as a calculator is interesting, to do useful and interesting things, we need to assign _values_ to _objects_. To create objects, we need to give it a name followed by the assignment operator `<-` (or, entirely equivalently, `=`) and the value we want to give it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 55 \n```\n:::\n\n\n`<-` is the assignment operator. Assigns values on the right to objects on the left, it is like an arrow that points from the value to the object. Using an `=` is equivalent (in nearly all cases). Learn to use `<-` as it is good programming practice. \n\nObjects can be given any name such as `x`, `current_temperature`, or `subject_id` (see below). You want your object names to be explicit and not too long. They cannot start with a number (`2x` is not valid but `x2` is). R is case sensitive (e.g., `weight_kg` is different from `Weight_kg`). There are some names that cannot be used because they represent the names of fundamental functions in R (e.g., `if`, `else`, `for`, see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). In general, even if it's allowed, it's best to not use other function names, which we'll get into shortly (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`). When in doubt, check the help to see if the name is already in use. It's also best to avoid dots (`.`) within a variable name as in `my.dataset`. It is also recommended to use nouns for variable names, and verbs for function names.\n\nWhen assigning a value to an object, R does not print anything. You can force to print the value by typing the name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n:::\n\n\nNow that R has `weight_kg` in memory, which R refers to as the \"global environment\", we can do arithmetic with it. For instance, we may want to convert this weight in pounds (weight in pounds is 2.2 times the weight in kg).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2.2 * weight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 121\n```\n\n\n:::\n:::\n\n\nWe can also change a variable's value by assigning it a new one:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 57.5\n2.2 * weight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 126.5\n```\n\n\n:::\n:::\n\n\nThis means that assigning a value to one variable does not change the values of other variables. For example, let's store the animal's weight in pounds in a variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_lb <- 2.2 * weight_kg\n```\n:::\n\n\nand then change `weight_kg` to 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_kg <- 100\n```\n:::\n\n\nWhat do you think is the current content of the object `weight_lb`, 126.5 or 220?\n\nYou can see what objects (variables) are stored by viewing the Environment tab in Rstudio. You can also use the `ls()` function. You can remove objects (variables) with the `rm()` function. You can do this one at a time or remove several objects at once. You can also use the little broom button in your environment pane to remove everything from your environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\nrm(weight_lb, weight_kg)\nls()\n```\n:::\n\n\nWhat happens when you type the following, now?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweight_lb # oops! you should get an error because weight_lb no longer exists!\n```\n:::\n\n\n## Rules for Names in R\n\nR allows users to assign names to objects such as variables, functions, and even dimensions of data. However, these names must follow a few rules.\n\n- Names may contain any combination of letters, numbers, underscore, and \".\"\n- Names may not start with numbers, underscore.\n- R names are case-sensitive.\n\nExamples of valid R names include:\n\n```\npi\nx\ncamelCaps\nmy_stuff\nMY_Stuff\nthis.is.the.name.of.the.man\nABC123\nabc1234asdf\n.hi\n```\n\n## Resources for Getting Help\n\nThere is extensive built-in help and documentation within R. Obviously, Google is your friend, but there are many ways to get help from within R itself.\n\nIf the name of the function or object on which help is sought is known, the following approaches with the name of the function or object will be helpful. For a concrete example, examine the help for the `print` method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(print)\nhelp('print')\n?print\n```\n:::\n\n\nIf the name of the function or object on which help is sought is *not* known, the following from within R will be helpful. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp.search('microarray')\nRSiteSearch('microarray')\napropos('histogram')\n```\n:::\n\n\nThere are also tons of online resources that Google will include in searches if online searching feels more appropriate.\n\nI strongly recommend using `help(\"newfunction\"\")` for all\nfunctions that are new or unfamiliar to you.\n\nThere are also many open and free resources and reference\nguides for R.\n\n* [Quick-R](http://www.statmethods.net/): a quick online reference for data input, basic statistics and plots\n* R reference card [PDF](https://cran.r-project.org/doc/contrib/Short-refcard.pdf) by Tom Short\n* Rstudio [cheatsheets](https://www.rstudio.com/resources/cheatsheets/)\n\n\n::: {.callout-tip}\n## The details of an R help page\n\nWhen developers write R functions, they can include a help page that describes the function, its arguments, and its return value. The help page is written in a special format called \"Rd\" (R documentation) and is stored in the package's `man` directory. When you call `help(function_name)` or `?function_name`, R looks for the corresponding Rd file and displays it in the help viewer.\n\nThe help page typically includes the following sections:\n\n- **Title**: A brief description of the function.\n- **Description**: A more detailed explanation of what the function does.\n- **Usage**: The syntax for calling the function, including its arguments.\n- **Arguments**: A list of the function's arguments, their types, and their default values.\n- **Value**: A description of the value returned by the function.\n- **Examples**: Examples of how to use the function, often with sample data.\n\nThe examples section is particularly useful for understanding how to use the function in practice. You can run the examples by copying and pasting them into the R console or by using the `example(function_name)` command.\n\nTake a look at the help page for the `hist` function, which creates histograms in R. You can access it by typing `help(hist)` or `?hist` in the R console. The help page will provide you with information about the function, its arguments, and examples of how to use it.\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}